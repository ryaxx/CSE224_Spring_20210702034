
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /Users/onurakkaya/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/lab4/src/top.v
Parsing SystemVerilog input from `/openlane/designs/lab4/src/top.v' to AST representation.
Storing AST representation for module `$abstract\top'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openlane/designs/lab4/src/ALU.v
Parsing SystemVerilog input from `/openlane/designs/lab4/src/ALU.v' to AST representation.
Storing AST representation for module `$abstract\ALU'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /openlane/designs/lab4/src/RegisterFile.v
Parsing SystemVerilog input from `/openlane/designs/lab4/src/RegisterFile.v' to AST representation.
Storing AST representation for module `$abstract\RegisterFile'.
Successfully finished Verilog frontend.

5. Executing HIERARCHY pass (managing design hierarchy).

6. Executing AST frontend in derive mode using pre-parsed AST for module `\top'.
Generating RTLIL representation for module `\top'.

6.1. Analyzing design hierarchy..
Top module:  \top

6.2. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU'.
Generating RTLIL representation for module `\ALU'.

6.3. Executing AST frontend in derive mode using pre-parsed AST for module `\RegisterFile'.
Generating RTLIL representation for module `\RegisterFile'.

6.4. Analyzing design hierarchy..
Top module:  \top
Used module:     \ALU
Used module:     \RegisterFile

6.5. Analyzing design hierarchy..
Top module:  \top
Used module:     \ALU
Used module:     \RegisterFile
Removing unused module `$abstract\RegisterFile'.
Removing unused module `$abstract\ALU'.
Removing unused module `$abstract\top'.
Removed 3 unused modules.

7. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/lab4/runs/RUN_2025.06.04_20.50.20/tmp/synthesis/hierarchy.dot'.
Dumping module top to page 1.
Renaming module top to top.

8. Executing TRIBUF pass.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \ALU
Used module:     \RegisterFile

9.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \ALU
Used module:     \RegisterFile
Removed 0 unused modules.

10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

11. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/openlane/designs/lab4/src/ALU.v:7$1 in module ALU.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/lab4/src/ALU.v:7$1 in module ALU.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/lab4/src/RegisterFile.v:13$9 in module RegisterFile.
Removed a total of 1 dead cases.

12. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 4 assignments to connections.

13. Executing PROC_INIT pass (extract init attributes).

14. Executing PROC_ARST pass (detect async resets in processes).

15. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

16. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ALU.$proc$/openlane/designs/lab4/src/ALU.v:7$1'.
     1/1: $1\result[31:0]
Creating decoders for process `\RegisterFile.$proc$/openlane/designs/lab4/src/RegisterFile.v:13$9'.
     1/3: $1$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$15
     2/3: $1$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_DATA[31:0]$14
     3/3: $1$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_ADDR[4:0]$13

17. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ALU.\result' from process `\ALU.$proc$/openlane/designs/lab4/src/ALU.v:7$1'.

18. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\RegisterFile.$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_ADDR' using process `\RegisterFile.$proc$/openlane/designs/lab4/src/RegisterFile.v:13$9'.
  created $dff cell `$procdff$30' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_DATA' using process `\RegisterFile.$proc$/openlane/designs/lab4/src/RegisterFile.v:13$9'.
  created $dff cell `$procdff$31' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN' using process `\RegisterFile.$proc$/openlane/designs/lab4/src/RegisterFile.v:13$9'.
  created $dff cell `$procdff$32' with positive edge clock.

19. Executing PROC_MEMWR pass (convert process memory writes to cells).

20. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\ALU.$proc$/openlane/designs/lab4/src/ALU.v:7$1'.
Removing empty process `ALU.$proc$/openlane/designs/lab4/src/ALU.v:7$1'.
Found and cleaned up 1 empty switch in `\RegisterFile.$proc$/openlane/designs/lab4/src/RegisterFile.v:13$9'.
Removing empty process `RegisterFile.$proc$/openlane/designs/lab4/src/RegisterFile.v:13$9'.
Cleaned up 2 empty switches.

21. Executing CHECK pass (checking for obvious problems).
Checking module top...
Checking module ALU...
Checking module RegisterFile...
Found and reported 0 problems.

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
Optimizing module ALU.
<suppressed ~1 debug messages>
Optimizing module RegisterFile.

23. Executing FLATTEN pass (flatten design).
Deleting now unused module ALU.
Deleting now unused module RegisterFile.
<suppressed ~2 debug messages>

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 3 unused cells and 17 unused wires.
<suppressed ~4 debug messages>

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $flatten\regfile.$procmux$22:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12
      New ports: A=1'0, B=1'1, Y=$flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0]
      New connections: $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [31:1] = { $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] $flatten\regfile.$0$memwr$\registers$/openlane/designs/lab4/src/RegisterFile.v:15$6_EN[31:0]$12 [0] }
  Optimizing cells in module \top.
Performed a total of 1 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

26.16. Finished OPT passes. (There is nothing left to do.)

27. Executing FSM pass (extract and optimize FSM).

27.1. Executing FSM_DETECT pass (finding FSMs in design).

27.2. Executing FSM_EXTRACT pass (extracting FSM from design).

27.3. Executing FSM_OPT pass (simple optimizations of FSMs).

27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

27.5. Executing FSM_OPT pass (simple optimizations of FSMs).

27.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

27.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

27.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

28.9. Finished OPT passes. (There is nothing left to do.)

29. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell top.$flatten\alu.$procmux$19_CMP0 ($eq).

30. Executing PEEPOPT pass (run peephole optimizers).

31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

32. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $flatten\alu.$add$/openlane/designs/lab4/src/ALU.v:9$2 ($add).
  creating $macc model for $flatten\alu.$sub$/openlane/designs/lab4/src/ALU.v:10$3 ($sub).
  creating $alu model for $macc $flatten\alu.$sub$/openlane/designs/lab4/src/ALU.v:10$3.
  creating $alu model for $macc $flatten\alu.$add$/openlane/designs/lab4/src/ALU.v:9$2.
  creating $alu cell for $flatten\alu.$add$/openlane/designs/lab4/src/ALU.v:9$2: $auto$alumacc.cc:485:replace_alu$34
  creating $alu cell for $flatten\alu.$sub$/openlane/designs/lab4/src/ALU.v:10$3: $auto$alumacc.cc:485:replace_alu$37
  created 2 $alu and 0 $macc cells.

33. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module top that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\regfile.$memrd$\registers$/openlane/designs/lab4/src/RegisterFile.v:11$8 ($memrd):
    Found 4 activation_patterns using ctrl signal { $flatten\alu.$procmux$20_CMP $flatten\alu.$procmux$19_CMP $flatten\alu.$procmux$18_CMP $flatten\alu.$procmux$17_CMP }.
    Found 1 candidates: $flatten\regfile.$memrd$\registers$/openlane/designs/lab4/src/RegisterFile.v:10$7
    Analyzing resource sharing with $flatten\regfile.$memrd$\registers$/openlane/designs/lab4/src/RegisterFile.v:10$7 ($memrd):
      Found 4 activation_patterns using ctrl signal { $flatten\alu.$procmux$20_CMP $flatten\alu.$procmux$19_CMP $flatten\alu.$procmux$18_CMP $flatten\alu.$procmux$17_CMP }.
      Activation pattern for cell $flatten\regfile.$memrd$\registers$/openlane/designs/lab4/src/RegisterFile.v:11$8: $flatten\alu.$procmux$20_CMP = 1'1
      Activation pattern for cell $flatten\regfile.$memrd$\registers$/openlane/designs/lab4/src/RegisterFile.v:11$8: $flatten\alu.$procmux$18_CMP = 1'1
      Activation pattern for cell $flatten\regfile.$memrd$\registers$/openlane/designs/lab4/src/RegisterFile.v:11$8: $flatten\alu.$procmux$17_CMP = 1'1
      Activation pattern for cell $flatten\regfile.$memrd$\registers$/openlane/designs/lab4/src/RegisterFile.v:11$8: $flatten\alu.$procmux$19_CMP = 1'1
      Activation pattern for cell $flatten\regfile.$memrd$\registers$/openlane/designs/lab4/src/RegisterFile.v:10$7: $flatten\alu.$procmux$20_CMP = 1'1
      Activation pattern for cell $flatten\regfile.$memrd$\registers$/openlane/designs/lab4/src/RegisterFile.v:10$7: $flatten\alu.$procmux$18_CMP = 1'1
      Activation pattern for cell $flatten\regfile.$memrd$\registers$/openlane/designs/lab4/src/RegisterFile.v:10$7: $flatten\alu.$procmux$17_CMP = 1'1
      Activation pattern for cell $flatten\regfile.$memrd$\registers$/openlane/designs/lab4/src/RegisterFile.v:10$7: $flatten\alu.$procmux$19_CMP = 1'1
      Size of SAT problem: 0 cells, 41 variables, 108 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $flatten\alu.$procmux$20_CMP $flatten\alu.$procmux$19_CMP $flatten\alu.$procmux$18_CMP $flatten\alu.$procmux$17_CMP } = 4'0100
  Analyzing resource sharing options for $flatten\regfile.$memrd$\registers$/openlane/designs/lab4/src/RegisterFile.v:10$7 ($memrd):
    Found 4 activation_patterns using ctrl signal { $flatten\alu.$procmux$20_CMP $flatten\alu.$procmux$19_CMP $flatten\alu.$procmux$18_CMP $flatten\alu.$procmux$17_CMP }.
    No candidates found.
  Analyzing resource sharing options for $flatten\alu.$shr$/openlane/designs/lab4/src/ALU.v:12$5 ($shr):
    Found 1 activation_patterns using ctrl signal $flatten\alu.$procmux$17_CMP.
    No candidates found.
  Analyzing resource sharing options for $flatten\alu.$shl$/openlane/designs/lab4/src/ALU.v:11$4 ($shl):
    Found 1 activation_patterns using ctrl signal $flatten\alu.$procmux$18_CMP.
    No candidates found.

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

34.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

34.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

34.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

34.6. Executing OPT_DFF pass (perform DFF optimizations).

34.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

34.9. Finished OPT passes. (There is nothing left to do.)

35. Executing MEMORY pass.

35.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

35.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

35.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing top.regfile.registers write port 0.

35.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

35.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\regfile.registers'[0] in module `\top': no output FF found.
Checking read port `\regfile.registers'[1] in module `\top': no output FF found.
Checking read port address `\regfile.registers'[0] in module `\top': no address FF found.
Checking read port address `\regfile.registers'[1] in module `\top': no address FF found.

35.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

35.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory top.regfile.registers by address:

35.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

35.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

35.10. Executing MEMORY_COLLECT pass (generating $mem cells).

36. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~4 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

37.5. Finished fast OPT passes.

38. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \regfile.registers in module \top:
  created 32 $dff cells and 0 static cells of width 32.
  read interface: 0 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~10 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

39.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

39.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

39.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

39.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $flatten\alu.$procmux$16 in front of them:
        $auto$alumacc.cc:485:replace_alu$37
        $auto$alumacc.cc:485:replace_alu$34

39.7. Executing OPT_DFF pass (perform DFF optimizations).

39.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 107 unused wires.
<suppressed ~1 debug messages>

39.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

39.10. Rerunning OPT passes. (Maybe there is more to do..)

39.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

39.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $flatten\alu.$procmux$16: { $flatten\alu.$procmux$18_CMP $flatten\alu.$procmux$17_CMP }
  Optimizing cells in module \top.
Performed a total of 1 changes.

39.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

39.14. Executing OPT_SHARE pass.

39.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\regfile.registers[9]$62 ($dff) from module top (D = \WD3, Q = \regfile.registers[9]).
Adding EN signal on $memory\regfile.registers[8]$60 ($dff) from module top (D = \WD3, Q = \regfile.registers[8]).
Adding EN signal on $memory\regfile.registers[7]$58 ($dff) from module top (D = \WD3, Q = \regfile.registers[7]).
Adding EN signal on $memory\regfile.registers[6]$56 ($dff) from module top (D = \WD3, Q = \regfile.registers[6]).
Adding EN signal on $memory\regfile.registers[5]$54 ($dff) from module top (D = \WD3, Q = \regfile.registers[5]).
Adding EN signal on $memory\regfile.registers[4]$52 ($dff) from module top (D = \WD3, Q = \regfile.registers[4]).
Adding EN signal on $memory\regfile.registers[3]$50 ($dff) from module top (D = \WD3, Q = \regfile.registers[3]).
Adding EN signal on $memory\regfile.registers[31]$106 ($dff) from module top (D = \WD3, Q = \regfile.registers[31]).
Adding EN signal on $memory\regfile.registers[30]$104 ($dff) from module top (D = \WD3, Q = \regfile.registers[30]).
Adding EN signal on $memory\regfile.registers[2]$48 ($dff) from module top (D = \WD3, Q = \regfile.registers[2]).
Adding EN signal on $memory\regfile.registers[29]$102 ($dff) from module top (D = \WD3, Q = \regfile.registers[29]).
Adding EN signal on $memory\regfile.registers[28]$100 ($dff) from module top (D = \WD3, Q = \regfile.registers[28]).
Adding EN signal on $memory\regfile.registers[27]$98 ($dff) from module top (D = \WD3, Q = \regfile.registers[27]).
Adding EN signal on $memory\regfile.registers[26]$96 ($dff) from module top (D = \WD3, Q = \regfile.registers[26]).
Adding EN signal on $memory\regfile.registers[25]$94 ($dff) from module top (D = \WD3, Q = \regfile.registers[25]).
Adding EN signal on $memory\regfile.registers[24]$92 ($dff) from module top (D = \WD3, Q = \regfile.registers[24]).
Adding EN signal on $memory\regfile.registers[23]$90 ($dff) from module top (D = \WD3, Q = \regfile.registers[23]).
Adding EN signal on $memory\regfile.registers[22]$88 ($dff) from module top (D = \WD3, Q = \regfile.registers[22]).
Adding EN signal on $memory\regfile.registers[21]$86 ($dff) from module top (D = \WD3, Q = \regfile.registers[21]).
Adding EN signal on $memory\regfile.registers[20]$84 ($dff) from module top (D = \WD3, Q = \regfile.registers[20]).
Adding EN signal on $memory\regfile.registers[1]$46 ($dff) from module top (D = \WD3, Q = \regfile.registers[1]).
Adding EN signal on $memory\regfile.registers[19]$82 ($dff) from module top (D = \WD3, Q = \regfile.registers[19]).
Adding EN signal on $memory\regfile.registers[18]$80 ($dff) from module top (D = \WD3, Q = \regfile.registers[18]).
Adding EN signal on $memory\regfile.registers[17]$78 ($dff) from module top (D = \WD3, Q = \regfile.registers[17]).
Adding EN signal on $memory\regfile.registers[16]$76 ($dff) from module top (D = \WD3, Q = \regfile.registers[16]).
Adding EN signal on $memory\regfile.registers[15]$74 ($dff) from module top (D = \WD3, Q = \regfile.registers[15]).
Adding EN signal on $memory\regfile.registers[14]$72 ($dff) from module top (D = \WD3, Q = \regfile.registers[14]).
Adding EN signal on $memory\regfile.registers[13]$70 ($dff) from module top (D = \WD3, Q = \regfile.registers[13]).
Adding EN signal on $memory\regfile.registers[12]$68 ($dff) from module top (D = \WD3, Q = \regfile.registers[12]).
Adding EN signal on $memory\regfile.registers[11]$66 ($dff) from module top (D = \WD3, Q = \regfile.registers[11]).
Adding EN signal on $memory\regfile.registers[10]$64 ($dff) from module top (D = \WD3, Q = \regfile.registers[10]).
Adding EN signal on $memory\regfile.registers[0]$44 ($dff) from module top (D = \WD3, Q = \regfile.registers[0]).

39.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 32 unused cells and 32 unused wires.
<suppressed ~33 debug messages>

39.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

39.18. Rerunning OPT passes. (Maybe there is more to do..)

39.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

39.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

39.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

39.22. Executing OPT_SHARE pass.

39.23. Executing OPT_DFF pass (perform DFF optimizations).

39.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

39.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

39.26. Finished OPT passes. (There is nothing left to do.)

40. Executing TECHMAP pass (map to technology primitives).

40.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

40.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$56955d0f36f77738c952d3505dc563df3ee11b94\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$dce7c1188cb25d2520d170426d59301c3b73f9e7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~1665 debug messages>

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~258 debug messages>

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~180 debug messages>
Removed a total of 60 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 21 unused cells and 286 unused wires.
<suppressed ~22 debug messages>

41.5. Finished fast OPT passes.

42. Executing ABC pass (technology mapping using ABC).

42.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 3045 gates and 4088 wires to a netlist network with 1042 inputs and 64 outputs.

42.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

42.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:              XNOR cells:       15
ABC RESULTS:               NOR cells:       36
ABC RESULTS:               XOR cells:       79
ABC RESULTS:               MUX cells:     2305
ABC RESULTS:               NOT cells:      498
ABC RESULTS:             ORNOT cells:       20
ABC RESULTS:              NAND cells:       14
ABC RESULTS:                OR cells:      319
ABC RESULTS:            ANDNOT cells:      170
ABC RESULTS:        internal signals:     2982
ABC RESULTS:           input signals:     1042
ABC RESULTS:          output signals:       64
Removing temp directory.

43. Executing OPT pass (performing simple optimizations).

43.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1312 debug messages>

43.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

43.3. Executing OPT_DFF pass (perform DFF optimizations).

43.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 10 unused cells and 1385 unused wires.
<suppressed ~11 debug messages>

43.5. Finished fast OPT passes.

44. Executing HIERARCHY pass (managing design hierarchy).

44.1. Analyzing design hierarchy..
Top module:  \top

44.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

45. Printing statistics.

=== top ===

   Number of wires:               3469
   Number of wire bits:           4797
   Number of public wires:          54
   Number of public wire bits:    1382
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4471
     $_ANDNOT_                     170
     $_AND_                          1
     $_DFFE_PP_                   1024
     $_MUX_                       2305
     $_NAND_                        14
     $_NOR_                         36
     $_NOT_                        488
     $_ORNOT_                       20
     $_OR_                         319
     $_XNOR_                        15
     $_XOR_                         79

46. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

47. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/lab4/runs/RUN_2025.06.04_20.50.20/tmp/synthesis/post_techmap.dot'.
Dumping module top to page 1.

48. Executing SHARE pass (SAT-based resource sharing).

49. Executing OPT pass (performing simple optimizations).

49.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

49.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

49.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

49.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

49.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

49.6. Executing OPT_DFF pass (perform DFF optimizations).

49.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

49.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

49.9. Finished OPT passes. (There is nothing left to do.)

50. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 14 unused wires.
<suppressed ~14 debug messages>

51. Printing statistics.

=== top ===

   Number of wires:               3455
   Number of wire bits:           4522
   Number of public wires:          40
   Number of public wire bits:    1107
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4471
     $_ANDNOT_                     170
     $_AND_                          1
     $_DFFE_PP_                   1024
     $_MUX_                       2305
     $_NAND_                        14
     $_NOR_                         36
     $_NOT_                        488
     $_ORNOT_                       20
     $_OR_                         319
     $_XNOR_                        15
     $_XOR_                         79

mapping tbuf

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /Users/onurakkaya/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/Users/onurakkaya/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing TECHMAP pass (map to technology primitives).

54.1. Executing Verilog-2005 frontend: /Users/onurakkaya/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/Users/onurakkaya/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

54.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

55. Executing SIMPLEMAP pass (map simple cells to gate primitives).

56. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

56.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\top':
  mapped 1024 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

57. Printing statistics.

=== top ===

   Number of wires:               4479
   Number of wire bits:           5546
   Number of public wires:          40
   Number of public wire bits:    1107
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5495
     $_ANDNOT_                     170
     $_AND_                          1
     $_MUX_                       3329
     $_NAND_                        14
     $_NOR_                         36
     $_NOT_                        488
     $_ORNOT_                       20
     $_OR_                         319
     $_XNOR_                        15
     $_XOR_                         79
     sky130_fd_sc_hd__dfxtp_2     1024

[INFO]: USING STRATEGY AREA 0

58. Executing ABC pass (technology mapping using ABC).

58.1. Extracting gate netlist of module `\top' to `/tmp/yosys-abc-ezSCem/input.blif'..
Extracted 4471 gates and 5545 wires to a netlist network with 1074 inputs and 1056 outputs.

58.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-ezSCem/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-ezSCem/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-ezSCem/input.blif 
ABC: + read_lib -w /openlane/designs/lab4/runs/RUN_2025.06.04_20.50.20/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.11 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/lab4/runs/RUN_2025.06.04_20.50.20/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.16 sec
ABC: Memory =    9.54 MB. Time =     0.16 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/lab4/runs/RUN_2025.06.04_20.50.20/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/lab4/runs/RUN_2025.06.04_20.50.20/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (6103.63 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   4300 ( 34.4 %)   Cap = 12.0 ff ( 14.7 %)   Area =    41068.14 ( 53.1 %)   Delay =  6913.98 ps  (  8.6 %)               
ABC: Path  0 --      38 : 0    4 pi                        A =   0.00  Df =  30.0  -16.9 ps  S =  47.2 ps  Cin =  0.0 ff  Cout =   8.8 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    2133 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 517.4 -234.4 ps  S = 634.0 ps  Cin =  2.1 ff  Cout =  54.1 ff  Cmax = 130.0 ff  G = 2434  
ABC: Path  2 --    2134 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1043.3 -405.4 ps  S = 588.6 ps  Cin =  2.1 ff  Cout =  50.5 ff  Cmax = 130.0 ff  G = 2274  
ABC: Path  3 --    2431 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1594.3 -594.5 ps  S = 629.6 ps  Cin =  2.1 ff  Cout =  54.1 ff  Cmax = 130.0 ff  G = 2434  
ABC: Path  4 --    2458 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =2148.0 -780.5 ps  S = 629.4 ps  Cin =  2.1 ff  Cout =  54.1 ff  Cmax = 130.0 ff  G = 2434  
ABC: Path  5 --    2467 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =2729.8 -981.6 ps  S = 670.5 ps  Cin =  2.1 ff  Cout =  57.7 ff  Cmax = 130.0 ff  G = 2593  
ABC: Path  6 --    2483 : 6    1 sky130_fd_sc_hd__mux4_2   A =  22.52  Df =3272.8 -993.5 ps  S =  75.7 ps  Cin =  2.6 ff  Cout =   2.0 ff  Cmax = 301.2 ff  G =   71  
ABC: Path  7 --    2485 : 3    1 sky130_fd_sc_hd__mux2_2   A =  11.26  Df =3418.9 -864.6 ps  S =  53.8 ps  Cin =  2.3 ff  Cout =   4.7 ff  Cmax = 297.6 ff  G =  195  
ABC: Path  8 --    2486 : 2    1 sky130_fd_sc_hd__nor2_2   A =   6.26  Df =3446.4 -827.5 ps  S =  70.9 ps  Cin =  4.4 ff  Cout =   1.8 ff  Cmax = 141.9 ff  G =   38  
ABC: Path  9 --    2491 : 4    3 sky130_fd_sc_hd__o2bb2a_2 A =  11.26  Df =3752.5 -719.2 ps  S = 103.4 ps  Cin =  1.8 ff  Cout =  16.1 ff  Cmax = 294.8 ff  G =  879  
ABC: Path 10 --    2492 : 2    3 sky130_fd_sc_hd__nand2_2  A =   6.26  Df =3840.8 -736.6 ps  S =  63.1 ps  Cin =  4.4 ff  Cout =   7.9 ff  Cmax = 295.7 ff  G =  171  
ABC: Path 11 --    2744 : 4    1 sky130_fd_sc_hd__or4b_2   A =  10.01  Df =4067.8 -118.5 ps  S =  94.8 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 265.5 ff  G =  143  
ABC: Path 12 --    2745 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =4268.5  -59.1 ps  S = 312.6 ps  Cin =  2.1 ff  Cout =  26.1 ff  Cmax = 130.0 ff  G = 1188  
ABC: Path 13 --    2746 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =4516.5  -31.5 ps  S = 304.6 ps  Cin =  2.1 ff  Cout =  25.5 ff  Cmax = 130.0 ff  G = 1156  
ABC: Path 14 --    2865 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =4942.2 -185.8 ps  S = 476.7 ps  Cin =  2.1 ff  Cout =  40.6 ff  Cmax = 130.0 ff  G = 1836  
ABC: Path 15 --    2928 : 2    4 sky130_fd_sc_hd__nor2_2   A =   6.26  Df =5058.5  -74.5 ps  S = 165.3 ps  Cin =  4.4 ff  Cout =  12.4 ff  Cmax = 141.9 ff  G =  262  
ABC: Path 16 --    3916 : 3    2 sky130_fd_sc_hd__o21a_2   A =   8.76  Df =5271.5 -147.8 ps  S =  42.9 ps  Cin =  2.4 ff  Cout =   3.8 ff  Cmax = 294.8 ff  G =  150  
ABC: Path 17 --    3949 : 3    2 sky130_fd_sc_hd__mux2_2   A =  11.26  Df =5528.4 -264.1 ps  S =  52.4 ps  Cin =  2.3 ff  Cout =   4.3 ff  Cmax = 297.6 ff  G =  179  
ABC: Path 18 --    3950 : 3    2 sky130_fd_sc_hd__mux2_2   A =  11.26  Df =5797.5 -374.9 ps  S =  54.8 ps  Cin =  2.3 ff  Cout =   5.0 ff  Cmax = 297.6 ff  G =  208  
ABC: Path 19 --    4097 : 4    1 sky130_fd_sc_hd__o22a_2   A =  10.01  Df =6009.7 -464.5 ps  S =  34.2 ps  Cin =  2.4 ff  Cout =   2.4 ff  Cmax = 304.9 ff  G =   97  
ABC: Path 20 --    4099 : 5    1 sky130_fd_sc_hd__a32o_2   A =  11.26  Df =6253.3 -562.1 ps  S =  41.8 ps  Cin =  2.3 ff  Cout =   1.7 ff  Cmax = 264.6 ff  G =   69  
ABC: Path 21 --    4101 : 3    1 sky130_fd_sc_hd__or3_2    A =   7.51  Df =6683.3 -638.2 ps  S =  72.2 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 310.4 ff  G =  138  
ABC: Path 22 --    4102 : 1    1 sky130_fd_sc_hd__buf_1    A =   3.75  Df =6914.0 -552.7 ps  S = 395.7 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi37 (\A2 [0]).  End-point = po29 (\ALUResult [29]).
ABC: + print_stats -m 
ABC: netlist                       : i/o = 1074/ 1056  lat =    0  nd =  4300  edge =  11349  area =41062.93  delay =24.00  lev = 24
ABC: + write_blif /tmp/yosys-abc-ezSCem/output.blif 

58.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a32oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:      532
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:       29
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       37
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       52
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       67
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       61
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       25
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       39
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       28
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       72
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       42
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:      107
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:      126
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:     1370
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:     1438
ABC RESULTS:        internal signals:     3415
ABC RESULTS:           input signals:     1074
ABC RESULTS:          output signals:     1056
Removing temp directory.

59. Executing SETUNDEF pass (replace undef values with defined constants).

60. Executing HILOMAP pass (mapping to constant drivers).

61. Executing SPLITNETS pass (splitting up multi-bit signals).

62. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 5545 unused wires.
<suppressed ~1 debug messages>

63. Executing INSBUF pass (insert buffer cells for connected wires).

64. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

65. Printing statistics.

=== top ===

   Number of wires:               5300
   Number of wire bits:           5375
   Number of public wires:        1032
   Number of public wire bits:    1107
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5324
     sky130_fd_sc_hd__a211o_2       13
     sky130_fd_sc_hd__a21bo_2        6
     sky130_fd_sc_hd__a21boi_2       2
     sky130_fd_sc_hd__a21o_2        33
     sky130_fd_sc_hd__a21oi_2       61
     sky130_fd_sc_hd__a221o_2       24
     sky130_fd_sc_hd__a221oi_2       1
     sky130_fd_sc_hd__a22o_2         5
     sky130_fd_sc_hd__a22oi_2        1
     sky130_fd_sc_hd__a2bb2o_2      29
     sky130_fd_sc_hd__a311o_2        3
     sky130_fd_sc_hd__a31o_2        15
     sky130_fd_sc_hd__a31oi_2        1
     sky130_fd_sc_hd__a32o_2         3
     sky130_fd_sc_hd__a32oi_2        2
     sky130_fd_sc_hd__a41o_2         5
     sky130_fd_sc_hd__and2_2        67
     sky130_fd_sc_hd__and2b_2        8
     sky130_fd_sc_hd__and3_2        14
     sky130_fd_sc_hd__and3b_2        6
     sky130_fd_sc_hd__and4_2         2
     sky130_fd_sc_hd__and4b_2        2
     sky130_fd_sc_hd__buf_1       1438
     sky130_fd_sc_hd__dfxtp_2     1024
     sky130_fd_sc_hd__inv_2         42
     sky130_fd_sc_hd__mux2_2      1370
     sky130_fd_sc_hd__mux4_2       532
     sky130_fd_sc_hd__nand2_2      107
     sky130_fd_sc_hd__nand2b_2       1
     sky130_fd_sc_hd__nand3_2        5
     sky130_fd_sc_hd__nand3b_2       2
     sky130_fd_sc_hd__nand4_2        1
     sky130_fd_sc_hd__nor2_2       126
     sky130_fd_sc_hd__nor2b_2        3
     sky130_fd_sc_hd__o211a_2       19
     sky130_fd_sc_hd__o211ai_2       2
     sky130_fd_sc_hd__o21a_2        37
     sky130_fd_sc_hd__o21ai_2       52
     sky130_fd_sc_hd__o21ba_2        7
     sky130_fd_sc_hd__o21bai_2       4
     sky130_fd_sc_hd__o221a_2       13
     sky130_fd_sc_hd__o22a_2        28
     sky130_fd_sc_hd__o22ai_2        2
     sky130_fd_sc_hd__o2bb2a_2      16
     sky130_fd_sc_hd__o311a_2        4
     sky130_fd_sc_hd__o31a_2         4
     sky130_fd_sc_hd__o31ai_2        2
     sky130_fd_sc_hd__o32a_2         5
     sky130_fd_sc_hd__o41a_2         2
     sky130_fd_sc_hd__or2_2         72
     sky130_fd_sc_hd__or2b_2        11
     sky130_fd_sc_hd__or3_2         13
     sky130_fd_sc_hd__or3b_2         7
     sky130_fd_sc_hd__or4_2          4
     sky130_fd_sc_hd__or4b_2         2
     sky130_fd_sc_hd__xnor2_2       39
     sky130_fd_sc_hd__xor2_2        25

   Chip area for module '\top': 62849.027200

66. Executing Verilog backend.
Dumping module `\top'.

67. Executing JSON backend.

End of script. Logfile hash: 94c0984cad, CPU: user 2.76s system 0.09s, MEM: 46.69 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 73% 2x abc (7 sec), 4% 24x opt_expr (0 sec), ...
